// <auto-generated />
using System;
using BackESPD.Persistense.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackESPD.Persistense.Migrations
{
    [DbContext(typeof(BackESPDDbContext))]
    partial class BackESPDDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackESPD.Domain.Entities.ActivityLogsForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlant")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TypeActivity")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("IdPlant");

                    b.HasIndex("NationalIdentificationNumber");

                    b.ToTable("ActivityLogsForm", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.DamageReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDamage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionDamage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TrueInformation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TypeDamage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NationalIdentificationNumber");

                    b.ToTable("DamageReport", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.FormatPTAPForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Alkaline")
                        .HasColumnType("float");

                    b.Property<double>("AlkalineChlorine")
                        .HasColumnType("float");

                    b.Property<double>("AlkalineFinalReading")
                        .HasColumnType("float");

                    b.Property<double>("AlkalineInitialReading")
                        .HasColumnType("float");

                    b.Property<double>("AlkalineTotal")
                        .HasColumnType("float");

                    b.Property<double>("AlkalinityPh")
                        .HasColumnType("float");

                    b.Property<double>("ChlorineGas")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlant")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ParticlesPerMillion")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<string>("TypeWater")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdPlant");

                    b.HasIndex("NationalIdentificationNumber");

                    b.ToTable("FormatPTAPForm", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.JarFormatForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlant")
                        .HasColumnType("int");

                    b.Property<int>("JarConcentration")
                        .HasColumnType("int");

                    b.Property<string>("JarOptime")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PhJar")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPlant");

                    b.HasIndex("NationalIdentificationNumber");

                    b.ToTable("JarFormatForm", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TypePlant")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Plant", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.SampleForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CreamWeightKilos")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlant")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MediumFlow")
                        .HasColumnType("float");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Ph")
                        .HasColumnType("float");

                    b.Property<int>("SampleNumber")
                        .HasColumnType("int");

                    b.Property<double>("SiftingWeightKilos")
                        .HasColumnType("float");

                    b.Property<double>("TemperatureC")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdPlant");

                    b.HasIndex("NationalIdentificationNumber");

                    b.ToTable("SampleForm", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7de92b5e-4db8-4958-9a1a-4175f2f66228",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6269f301-3dcf-4162-b6ca-2ace1ff5cf86",
                            Email = "mar@gmail.com",
                            EmailConfirmed = false,
                            FullName = "mar",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2123, 11, 26, 5, 34, 14, 618, DateTimeKind.Unspecified).AddTicks(3819), new TimeSpan(0, 0, 0, 0, 0)),
                            NationalIdentificationNumber = "1017182914",
                            NormalizedEmail = "MAR@GMAIL.COM",
                            NormalizedUserName = "MAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELvpLeGKZp1X60dGgCE2q9TMyBrEkmh1zrAZ/Swq5RLrFjDU1mCmelIql/NKGDY68Q==",
                            PhoneNumber = "11111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b0a91bea-d7ce-4472-9d22-75d28d9b1e26",
                            TwoFactorEnabled = false,
                            UserName = "mar@gmail.com"
                        },
                        new
                        {
                            Id = "75700239-41a2-47dd-8e2f-6e6d928f0569",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f1c60e6-53a0-4991-a5d4-97c27cbb93cf",
                            Email = "esteban@gmail.com",
                            EmailConfirmed = false,
                            FullName = "esteban",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2123, 11, 26, 5, 34, 14, 618, DateTimeKind.Unspecified).AddTicks(3851), new TimeSpan(0, 0, 0, 0, 0)),
                            NationalIdentificationNumber = "1017123503",
                            NormalizedEmail = "ESTEBAN@GMAIL.COM",
                            NormalizedUserName = "ESTEBAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEC641DYT6ywrRvXcB/xPCI/nBPL4f/dces4/FhHSTg4vIcX3egA86//Qryzzyvo6HQ==",
                            PhoneNumber = "11111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2c188ed-3c64-4394-9479-c7b5ce09a6af",
                            TwoFactorEnabled = false,
                            UserName = "esteban@gmail.com"
                        },
                        new
                        {
                            Id = "49d8083d-0478-4f98-924c-73dcfa54059c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ab163f43-d742-4afa-8f6e-63582ea6e63e",
                            Email = "sara@gmail.com",
                            EmailConfirmed = false,
                            FullName = "sara",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2123, 11, 26, 5, 34, 14, 618, DateTimeKind.Unspecified).AddTicks(3866), new TimeSpan(0, 0, 0, 0, 0)),
                            NationalIdentificationNumber = "1017123700",
                            NormalizedEmail = "SARA@GMAIL.COM",
                            NormalizedUserName = "SARA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHF4Hw3U2p+2mIeSVosE9/IS52aSd/fVz/W00+U+WdSoQdQY+pnb7NAOVbcOls1dYw==",
                            PhoneNumber = "11111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0cbd3b07-02ab-478d-9c0e-3892cc0bf544",
                            TwoFactorEnabled = false,
                            UserName = "sara@gmail.com"
                        },
                        new
                        {
                            Id = "40d9916d-0878-48c9-808f-f9ceacdabbff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9576dd0-86cf-4963-a864-3aa9efed8ff9",
                            Email = "nieves@gmail.com",
                            EmailConfirmed = false,
                            FullName = "nieves",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2123, 11, 26, 5, 34, 14, 618, DateTimeKind.Unspecified).AddTicks(3876), new TimeSpan(0, 0, 0, 0, 0)),
                            NationalIdentificationNumber = "1017123111",
                            NormalizedEmail = "NIEVES@GMAIL.COM",
                            NormalizedUserName = "NIEVES@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEB13SWgTtl85ESsxJE8RMjhnY9RZ1UM++sqQf/IbjiGFgXJSQuBSy44gFX9c32cQvA==",
                            PhoneNumber = "11111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a71f1dad-8a77-4c36-919d-0279e5c1e6cc",
                            TwoFactorEnabled = false,
                            UserName = "nieves@gmail.com"
                        });
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.WaterControlForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AluminumSulfate")
                        .HasColumnType("float");

                    b.Property<double>("AmountWaterCaptured")
                        .HasColumnType("float");

                    b.Property<double>("AmountWaterSupplied")
                        .HasColumnType("float");

                    b.Property<double>("ChlorineGas")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlant")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ParticlesPerMillion")
                        .HasColumnType("float");

                    b.Property<double>("SodiumHypochlorite")
                        .HasColumnType("float");

                    b.Property<double>("TotalHours")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdPlant");

                    b.HasIndex("NationalIdentificationNumber");

                    b.ToTable("WaterControlForm", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4a437b3e-a75f-42a0-8d06-3185f476406b",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "094f0cfe-9c78-477f-8f92-c5fb9d98581e",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "b9fee53d-4e32-4391-922e-0f4a2eb7f3b1",
                            Name = "Ptap",
                            NormalizedName = "PTAP"
                        },
                        new
                        {
                            Id = "44a8a7a6-73ec-4173-8d5f-3d2e5ab93b87",
                            Name = "Ptar",
                            NormalizedName = "PTAR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7de92b5e-4db8-4958-9a1a-4175f2f66228",
                            RoleId = "b9fee53d-4e32-4391-922e-0f4a2eb7f3b1"
                        },
                        new
                        {
                            UserId = "75700239-41a2-47dd-8e2f-6e6d928f0569",
                            RoleId = "094f0cfe-9c78-477f-8f92-c5fb9d98581e"
                        },
                        new
                        {
                            UserId = "49d8083d-0478-4f98-924c-73dcfa54059c",
                            RoleId = "44a8a7a6-73ec-4173-8d5f-3d2e5ab93b87"
                        },
                        new
                        {
                            UserId = "40d9916d-0878-48c9-808f-f9ceacdabbff",
                            RoleId = "4a437b3e-a75f-42a0-8d06-3185f476406b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.ActivityLogsForm", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.Plant", "IdPlantNavigation")
                        .WithMany("ActivityLogsForm")
                        .HasForeignKey("IdPlant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackESPD.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("ActivityLogsForm")
                        .HasForeignKey("NationalIdentificationNumber")
                        .HasPrincipalKey("NationalIdentificationNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPlantNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.DamageReport", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("DamageReport")
                        .HasForeignKey("NationalIdentificationNumber")
                        .HasPrincipalKey("NationalIdentificationNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.FormatPTAPForm", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.Plant", "IdPlantNavigation")
                        .WithMany("FormatPTAPForm")
                        .HasForeignKey("IdPlant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackESPD.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("FormatPTAPForms")
                        .HasForeignKey("NationalIdentificationNumber")
                        .HasPrincipalKey("NationalIdentificationNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPlantNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.JarFormatForm", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.Plant", "IdPlantNavigation")
                        .WithMany("JarFormatForm")
                        .HasForeignKey("IdPlant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackESPD.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("JarFormatForm")
                        .HasForeignKey("NationalIdentificationNumber")
                        .HasPrincipalKey("NationalIdentificationNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPlantNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.SampleForm", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.Plant", "IdPlantNavigation")
                        .WithMany("SampleForm")
                        .HasForeignKey("IdPlant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackESPD.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("SampleForm")
                        .HasForeignKey("NationalIdentificationNumber")
                        .HasPrincipalKey("NationalIdentificationNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPlantNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.WaterControlForm", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.Plant", "IdPlantNavigation")
                        .WithMany("WaterControlForm")
                        .HasForeignKey("IdPlant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackESPD.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("WaterControlForm")
                        .HasForeignKey("NationalIdentificationNumber")
                        .HasPrincipalKey("NationalIdentificationNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPlantNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackESPD.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.Plant", b =>
                {
                    b.Navigation("ActivityLogsForm");

                    b.Navigation("FormatPTAPForm");

                    b.Navigation("JarFormatForm");

                    b.Navigation("SampleForm");

                    b.Navigation("WaterControlForm");
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.User", b =>
                {
                    b.Navigation("ActivityLogsForm");

                    b.Navigation("DamageReport");

                    b.Navigation("FormatPTAPForms");

                    b.Navigation("JarFormatForm");

                    b.Navigation("SampleForm");

                    b.Navigation("WaterControlForm");
                });
#pragma warning restore 612, 618
        }
    }
}
