// <auto-generated />
using System;
using BackESPD.Persistense.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackESPD.Persistense.Migrations
{
    [DbContext(typeof(BackESPDDbContext))]
    partial class BackESPDDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackESPD.Domain.Entities.ActivityLogsForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlant")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("TypeActivity")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("IdPlant")
                        .IsUnique();

                    b.HasIndex("NationalIdentificationNumber");

                    b.ToTable("ActivityLogsForm", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.DamageReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDamage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionDamage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TrueInformation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("TypeDamage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NationalIdentificationNumber");

                    b.ToTable("DamageReport", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.FormatPTAPForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Alkaline")
                        .HasColumnType("float");

                    b.Property<double>("AlkalineChlorine")
                        .HasColumnType("float");

                    b.Property<double>("AlkalineFinalReading")
                        .HasColumnType("float");

                    b.Property<double>("AlkalineInitialReading")
                        .HasColumnType("float");

                    b.Property<double>("AlkalineTotal")
                        .HasColumnType("float");

                    b.Property<double>("AlkalinityPh")
                        .HasColumnType("float");

                    b.Property<double>("ChlorineGas")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlant")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("ParticlesPerMillion")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<string>("TypeWater")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdPlant")
                        .IsUnique();

                    b.HasIndex("IdUser");

                    b.ToTable("FormatPTAPForm", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.JarFormatForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlant")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JarConcentration")
                        .HasColumnType("int");

                    b.Property<string>("JarOptime")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PhJar")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPlant")
                        .IsUnique();

                    b.HasIndex("IdUser");

                    b.ToTable("JarFormatForm", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TypePlant")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Plant", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.SampleForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CreamWeightKilos")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlant")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("MediumFlow")
                        .HasColumnType("float");

                    b.Property<double>("Ph")
                        .HasColumnType("float");

                    b.Property<int>("SampleNumber")
                        .HasColumnType("int");

                    b.Property<double>("SiftingWeightKilos")
                        .HasColumnType("float");

                    b.Property<double>("TemperatureC")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdPlant")
                        .IsUnique();

                    b.HasIndex("IdUser");

                    b.ToTable("SampleForm", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalIdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cd1309ba-1ccc-43a0-ab49-c16c13802532",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e2ccdaf-f50e-4fa9-8596-33207590eb64",
                            Email = "mar@gmail.com",
                            EmailConfirmed = false,
                            FullName = "mar",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2123, 11, 19, 4, 41, 16, 319, DateTimeKind.Unspecified).AddTicks(9560), new TimeSpan(0, 0, 0, 0, 0)),
                            NationalIdentificationNumber = "1017182914",
                            NormalizedEmail = "MAR@GMAIL.COM",
                            NormalizedUserName = "MAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMXDWmLncqDqz94HSAi7YXr3cA09v6+Pu5nbQ39Vg/6laipQQ59RXr5yOHP9lOLFiA==",
                            PhoneNumber = "11111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7603ba0-f86c-455d-a37f-29d3d04f2ab0",
                            TwoFactorEnabled = false,
                            UserName = "mar@gmail.com"
                        },
                        new
                        {
                            Id = "58e96ed3-d011-48ee-8515-29648530d978",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9928be4-6bec-4e24-a4b9-7418dc3ec587",
                            Email = "esteban@gmail.com",
                            EmailConfirmed = false,
                            FullName = "esteban",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2123, 11, 19, 4, 41, 16, 319, DateTimeKind.Unspecified).AddTicks(9603), new TimeSpan(0, 0, 0, 0, 0)),
                            NationalIdentificationNumber = "1017123503",
                            NormalizedEmail = "ESTEBAN@GMAIL.COM",
                            NormalizedUserName = "ESTEBAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP3RSp9QsydGsua4xdWh9WqEzSCO6kYTco4jvv+yIh0C/zEfusjnPkbmB+syVRezTw==",
                            PhoneNumber = "11111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c4efabc-45c4-42ef-b9db-740c378ef444",
                            TwoFactorEnabled = false,
                            UserName = "esteban@gmail.com"
                        },
                        new
                        {
                            Id = "baa27d2d-072c-44fd-b5b7-57fed1e51ba8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9b9b0c2-2854-412b-9f02-ed81234cc0ad",
                            Email = "sara@gmail.com",
                            EmailConfirmed = false,
                            FullName = "sara",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2123, 11, 19, 4, 41, 16, 319, DateTimeKind.Unspecified).AddTicks(9610), new TimeSpan(0, 0, 0, 0, 0)),
                            NationalIdentificationNumber = "1017123700",
                            NormalizedEmail = "SARA@GMAIL.COM",
                            NormalizedUserName = "SARA@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIQz7XmsHb/YbtchjVZOPCb2GfURlzYQcYEWppSQKL7Ii76WDY83j9LBaQk8u1dPfw==",
                            PhoneNumber = "11111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a4e317f-6138-4478-9860-7982128bd42f",
                            TwoFactorEnabled = false,
                            UserName = "sara@gmail.com"
                        },
                        new
                        {
                            Id = "c047b370-9034-4a1a-9c0f-855af92c7a85",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c6e0226-a369-4ecd-b74e-0ed313c1086e",
                            Email = "nieves@gmail.com",
                            EmailConfirmed = false,
                            FullName = "nieves",
                            LockoutEnabled = false,
                            LockoutEnd = new DateTimeOffset(new DateTime(2123, 11, 19, 4, 41, 16, 319, DateTimeKind.Unspecified).AddTicks(9617), new TimeSpan(0, 0, 0, 0, 0)),
                            NationalIdentificationNumber = "1017123111",
                            NormalizedEmail = "NIEVES@GMAIL.COM",
                            NormalizedUserName = "NIEVES@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN95NfhK1zxKZHhtrZRX1bJa7ew2MjV6Rb/Yp4fxQHl4JNqW3JQt4ufEtt8O3uPrwg==",
                            PhoneNumber = "11111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c61945e4-df68-47bc-a435-8c2dde42ac55",
                            TwoFactorEnabled = false,
                            UserName = "nieves@gmail.com"
                        });
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.WaterControlForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AluminumSulfate")
                        .HasColumnType("float");

                    b.Property<double>("AmountWaterCaptured")
                        .HasColumnType("float");

                    b.Property<double>("AmountWaterSupplied")
                        .HasColumnType("float");

                    b.Property<double>("ChlorineGas")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPlant")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("ParticlesPerMillion")
                        .HasColumnType("float");

                    b.Property<double>("SodiumHypochlorite")
                        .HasColumnType("float");

                    b.Property<double>("TotalHours")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdPlant")
                        .IsUnique();

                    b.HasIndex("IdUser");

                    b.ToTable("WaterControlForm", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "819c9655-f11d-4da8-94b3-20f7588ae38b",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "ea97dd5a-634b-435c-94ca-184a69474aa0",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cd1309ba-1ccc-43a0-ab49-c16c13802532",
                            RoleId = "819c9655-f11d-4da8-94b3-20f7588ae38b"
                        },
                        new
                        {
                            UserId = "58e96ed3-d011-48ee-8515-29648530d978",
                            RoleId = "ea97dd5a-634b-435c-94ca-184a69474aa0"
                        },
                        new
                        {
                            UserId = "baa27d2d-072c-44fd-b5b7-57fed1e51ba8",
                            RoleId = "819c9655-f11d-4da8-94b3-20f7588ae38b"
                        },
                        new
                        {
                            UserId = "c047b370-9034-4a1a-9c0f-855af92c7a85",
                            RoleId = "819c9655-f11d-4da8-94b3-20f7588ae38b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.ActivityLogsForm", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.Plant", "IdPlantNavigation")
                        .WithOne("ActivityLogsForm")
                        .HasForeignKey("BackESPD.Domain.Entities.ActivityLogsForm", "IdPlant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackESPD.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("ActivityLogsForm")
                        .HasForeignKey("NationalIdentificationNumber")
                        .HasPrincipalKey("NationalIdentificationNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPlantNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.DamageReport", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("DamageReport")
                        .HasForeignKey("NationalIdentificationNumber")
                        .HasPrincipalKey("NationalIdentificationNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.FormatPTAPForm", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.Plant", "IdPlantNavigation")
                        .WithOne("FormatPTAPForm")
                        .HasForeignKey("BackESPD.Domain.Entities.FormatPTAPForm", "IdPlant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackESPD.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("FormatPTAPForms")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPlantNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.JarFormatForm", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.Plant", "IdPlantNavigation")
                        .WithOne("JarFormatForm")
                        .HasForeignKey("BackESPD.Domain.Entities.JarFormatForm", "IdPlant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackESPD.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("JarFormatForm")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPlantNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.SampleForm", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.Plant", "IdPlantNavigation")
                        .WithOne("SampleForm")
                        .HasForeignKey("BackESPD.Domain.Entities.SampleForm", "IdPlant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackESPD.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("SampleForm")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPlantNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.WaterControlForm", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.Plant", "IdPlantNavigation")
                        .WithOne("WaterControlForm")
                        .HasForeignKey("BackESPD.Domain.Entities.WaterControlForm", "IdPlant")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackESPD.Domain.Entities.User", "IdUserNavigation")
                        .WithMany("WaterControlForm")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPlantNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackESPD.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BackESPD.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.Plant", b =>
                {
                    b.Navigation("ActivityLogsForm")
                        .IsRequired();

                    b.Navigation("FormatPTAPForm")
                        .IsRequired();

                    b.Navigation("JarFormatForm")
                        .IsRequired();

                    b.Navigation("SampleForm")
                        .IsRequired();

                    b.Navigation("WaterControlForm")
                        .IsRequired();
                });

            modelBuilder.Entity("BackESPD.Domain.Entities.User", b =>
                {
                    b.Navigation("ActivityLogsForm");

                    b.Navigation("DamageReport");

                    b.Navigation("FormatPTAPForms");

                    b.Navigation("JarFormatForm");

                    b.Navigation("SampleForm");

                    b.Navigation("WaterControlForm");
                });
#pragma warning restore 612, 618
        }
    }
}
